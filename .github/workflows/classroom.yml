name: Checking lab work

on: [push]

permissions:
  checks: write
  actions: read
  contents: read

jobs:
  build:
    name: Autograding + Static Analysis + ChatGPT
    runs-on: ubuntu-latest

    # Секрет доступен на уровне job (org/repo secret с именем OPENAI_API_KEY)
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      # 1) Компиляция проекта
      - name: Compile (skip tests)
        run: mvn -B -ntp -DskipTests=true clean package

      # 2) Юнит-тесты
      - name: Run Unit Tests
        run: mvn -B -ntp test

      # 3) Checkstyle-отчёт
      - name: Run Checkstyle
        run: mvn -B -ntp checkstyle:checkstyle

      - name: Archive Checkstyle Report
        uses: actions/upload-artifact@v4
        with:
          name: checkstyle-report
          path: |
            target/checkstyle-result.xml
            target/site/checkstyle.html
          if-no-files-found: warn

      # ==== ChatGPT: ревью только Main.java ====
      - name: Collect Main.java only
        id: target
        run: |
          # ищем все отслеживаемые файлы с именем Main.java (без учёта регистра пути)
          git ls-files | grep -Ei '(^|/)Main\.java$' > java_files_for_review.txt || true
          COUNT=$(wc -l < java_files_for_review.txt | xargs)
          echo "Найдено файлов Main.java: $COUNT"
          echo "count=$COUNT" >> $GITHUB_OUTPUT
          if [ "$COUNT" -gt 0 ]; then
            echo "has_files=true" >> $GITHUB_OUTPUT
            echo "Список:"; cat java_files_for_review.txt
          else
            echo "has_files=false" >> $GITHUB_OUTPUT
            echo "Main.java не найден — ChatGPT шаг создаст заглушку."
          fi

      - name: ChatGPT code review (Main.java only)
        # Проверяем только наличие файлов; наличие ключа обрабатываем внутри шага
        if: ${{ steps.target.outputs.has_files == 'true' }}
        env:
          OPENAI_API_KEY: ${{ env.OPENAI_API_KEY }}
        run: |
          set -e
          mkdir -p chatgpt

          # Если ключ недоступен — создаём заглушку и выходим без ошибки
          if [ -z "$OPENAI_API_KEY" ]; then
            {
              echo "# ChatGPT Review Report (Main.java only)"
              echo
              echo "_Not generated._"
              echo
              echo "**Reason:** OPENAI_API_KEY is not available to this run."
            } > chatgpt/chatgpt_report.md
            exit 0
          fi

          python3 -m pip install --upgrade pip requests

          cat > gpt_review.py << 'PY'
          import os, json, pathlib, requests

          api_key = os.environ["OPENAI_API_KEY"]
          model   = os.environ.get("CHATGPT_MODEL","gpt-5-nano")
          base_prompt = os.environ.get("CHATGPT_PROMPT") or (
            "Act as a senior Java reviewer. Review the given Main.java only. "
            "Identify defects, concurrency issues, code smells, missing tests, "
            "API misuse, and style problems. Provide concrete suggestions and short unified diffs."
          )

          files = [p.strip() for p in open("java_files_for_review.txt","r",encoding="utf-8").read().splitlines() if p.strip()]
          def load(p):
            try:
              return open(p,"r",encoding="utf-8",errors="ignore").read()
            except Exception as e:
              return f"<<unable to read: {e}>>"

          CHUNK_LIMIT = 80000
          chunks, buf = [], f"System prompt:\n{base_prompt}\n\n"
          for fp in files:
            unit = f"\n\n### FILE: {fp}\n```java\n{load(fp)}\n```\n"
            if len(buf) + len(unit) > CHUNK_LIMIT and buf:
              chunks.append(buf); buf = ""
            buf += unit
          if buf.strip():
            chunks.append(buf)

          headers = {"Authorization": f"Bearer {api_key}", "Content-Type":"application/json"}
          out_md = ["# ChatGPT Review Report (Main.java only)", f"- Model: `{model}`", f"- Files analyzed: {len(files)}"]

          for i, payload in enumerate(chunks, start=1):
            try:
              r = requests.post(
                "https://api.openai.com/v1/responses",
                headers=headers,
                data=json.dumps({
                  "model": model,
                  "input": [
                    {"role":"system","content":"You are a precise, terse, actionable Java code reviewer."},
                    {"role":"user","content": payload}
                  ],
                }),
                timeout=300
              )
              if r.status_code != 200:
                out_md.append(f"\n\n## Chunk {i}: API error {r.status_code}\n```\n{r.text}\n```")
                continue
              data = r.json()
              text = data.get("output_text")
              if not text:
                try:
                  text = data["output"][0]["content"][0]["text"]
                except Exception:
                  text = json.dumps(data, ensure_ascii=False, indent=2)
              out_md.append(f"\n\n## Chunk {i}\n{text}")
            except Exception as e:
              out_md.append(f"\n\n## Chunk {i}: request failed\n```\n{e}\n```")

          pathlib.Path("chatgpt/chatgpt_report.md").write_text("\n".join(out_md), encoding="utf-8")
          PY
          python3 gpt_review.py

      # Гарантируем наличие артефакта (даже если выше шаг был пропущен или упал)
      - name: Ensure ChatGPT report exists (stub if missing)
        if: always()
        run: |
          if [ ! -f chatgpt/chatgpt_report.md ]; then
            mkdir -p chatgpt
            printf "# ChatGPT Review Report\n\n_Not generated._\n\n**Reason:** unknown (see logs)\n" > chatgpt/chatgpt_report.md
          fi

      - name: Upload ChatGPT Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: chatgpt-report
          path: chatgpt/chatgpt_report.md
          if-no-files-found: error
